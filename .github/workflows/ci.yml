name: CI

on:
    schedule:
    -   cron: 00 00 * * 1  # run every Monday at 00:00
    push:
        branches:
        -   main
        tags:
        -   v[0-9]+.[0-9]+.[0-9]+
    pull_request:
        branches:
        -   main

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
            with:
                fetch-depth: 0
        -   name: Set up Python
            uses: actions/setup-python@v2
            with:
                python-version: 3.8

        -   uses: actions/cache@v2
            with:
                path: ~/.cache/pre-commit
                key: precommit-${{ env.pythonLocation }}-${{ hashFiles('**/.pre-commit-config.yaml') }}
                restore-keys: |
                    precommit-${{ env.pythonLocation }}-

        -   name: Install dependencies
            run: |
                sudo apt install pandoc
                python -m pip install --upgrade pip
                pip install tox

        -   name: Linting
            run: |
                tox -e lint,check-docs,readme

    test:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            max-parallel: 5
            matrix:
                python: [3.7, 3.9]
                os: [ubuntu-latest]
                use_slepc: [false]
                include:
                -   os: ubuntu-latest
                    python: 3.8
                    use_slepc: true
                -   os: macos-latest
                    python: 3.9
                    # TODO(michalk8): enable this in the future (problem/missing mpif90)
                    use_slepc: false
                -   os: macos-latest
                    python: 3.8
                    use_slepc: false
        env:
            # make sure to pin this in tox.ini as well
            PC_VERSION: 3.18.0  # PETSc version
            SC_VERSION: 3.18.0  # SLEPc version

        steps:
        -   uses: actions/checkout@v2
            with:
                fetch-depth: 0
        -   name: Set up Python ${{ matrix.python }}
            uses: actions/setup-python@v2
            with:
                python-version: ${{ matrix.python }}

        -   name: Export environment variables
            if: matrix.use_slepc == true
            run: |
                echo "PETSC_DIR=$HOME/petsc-$PC_VERSION" >> $GITHUB_ENV
                echo "SLEPC_DIR=$HOME/slepc-$SC_VERSION" >> $GITHUB_ENV
                echo "PETSC_ARCH=arch-$RUNNER_OS-c-opt" >> $GITHUB_ENV
        -   name: Install PETSc/SLEPc dev dependencies
            if: matrix.use_slepc == true
            run: |
                ./.scripts/ci/install_dependencies.sh

        -   name: Get pip cache dir
            id: pip-cache-dir
            run: |
                echo "::set-output name=dir::$(pip cache dir)"
        -   name: Restore pip cache
            uses: actions/cache@v2
            with:
                path: ${{ steps.pip-cache-dir.outputs.dir }}
                key: pip-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}

        -   name: Install pip dependencies
            run: |
                python -m pip install --upgrade pip
                pip install tox tox-gh-actions codecov

        -   name: Restore PETSc/SLEPc tox cache
            if: matrix.use_slepc == true
            uses: actions/cache@v2
            with:
                path: .tox
                key: tox-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/install_dependencies.sh', '**/requirements.txt', '**/setup.py', '**/tox.ini') }}

        -   name: Test
            run: |
                tox -vv
            env:
                PLATFORM: ${{ matrix.os }}
                USE_SLEPC: ${{ matrix.use_slepc }}

        -   name: Upload coverage
            uses: codecov/codecov-action@v3
            with:
                files: ./coverage.xml
                flags: unittests
                name: ${{ matrix.os }}-${{ matrix.python }}-{{ matrix.use_slepc }}
                env_vars: OS,PYTHON
                fail_ci_if_error: false
                verbose: true

    deploy:
        needs: [lint, test]
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
            with:
                fetch-depth: 0
        -   name: Set up Python
            uses: actions/setup-python@v2
            with:
                python-version: 3.8
        -   name: Install pypa/build
            run: |
                python -m pip install --upgrade pip
                pip install build
        -   name: Build a binary wheel and a source tarball
            run: |
                python -m build --sdist --wheel --outdir dist/

        -   name: Publish package on PyPI
            uses: pypa/gh-action-pypi-publish@master
            with:
                user: __token__
                password: ${{ secrets.PYPI_PASSWORD }}
                skip_existing: true
                verbose: true
