[flake8]
per-file-ignores =
    */__init__.py: D104, F401
    tests/*: D
    docs/source/*: D
    pygpcca/utils/_checks.py: B902
# D104 Missing docstring in public package
# D104 Missing docstring in magic method
# F401 ... imported but unused
# B902 blind except Exception: statement
ignore = D100,D105,D107,RST201,RST203,RST301,RST306,E203,B028
# D100 D100 Missing docstring in public module
# D107 Missing docstring in __init__
# RST201 Block quote ends without a blank line; unexpected unindent.
# RST203 Definition list ends without a blank line; unexpected unindent. - happens because of docrep
# RST301 Unexpected indentation. - happens because of docrep
# RST306 Unknown target name: ...
# E203 whitespace before ':'
exclude =
    .git
    build
    dist
    __pycache__
    setup.py
max_line_length = 120
filename = *.py
ban-relative-imports = true
enable-extensions=G
rst-roles =
    mod
    class
    meth
    func
    attr
    paramref
    ref
rst-directives =
    envvar
    exception

[doc8]
max-line-length = 120
ignore-path = .tox,docs/source/api,pygpcca.egg-info,dist,build
quiet = 1

[pytest]
python_files = test_*.py
testpaths = tests/
xfail_strict = true

[coverage:run]
branch = true
parallel = true
source = pygpcca
omit = */__init__.py

[coverage:paths]
source =
    pygpcca
    */site-packages/pygpcca

[coverage:report]
exclude_lines =
    \#.*pragma:\s*no.?cover

    ^if __name__ == .__main__.:$

    ^\s*raise AssertionError\b
    ^\s*raise NotImplementedError\b
    ^\s*return NotImplemented\b
show_missing = true
precision = 2
skip_empty = True
sort = Miss

[tox]
requires = tox-conda
isolated_build = True
envlist =
    covclean
    lint
    py{3.8,3.9,3.10,3.11,3.12}-{slepc,noslepc}
    coverage
    readme
    check-docs
    docs
skip_missing_interpreters=true

[testenv]
deps =
    pytest
    pytest-cov
    pytest-mock
conda_deps =
    noslepc: blas
    noslepc: lapack
    slepc: mpi4py
    slepc: petsc4py
    slepc: slepc4py
conda_channels=
    conda-forge
passenv = TOXENV,CI,CODECOV_*,GITHUB_ACTIONS
usedevelop = true
commands = python -m pytest --cov --cov-append --cov-report=term-missing --cov-config={toxinidir}/tox.ini --ignore docs/ {posargs:-vv}

[testenv:covclean]
description = Clean coverage files.
deps = coverage
skip_install = True
commands = coverage erase

[testenv:coverage]
description = Report the coverage difference.
deps =
    coverage
    diff_cover
skip_install = true
depends = py{3.8,3.9,3.10,3.11,3.12}
parallel_show_output = True
commands =
    coverage report --omit="tox/*"
    coverage xml --omit="tox/*" -o {toxinidir}/coverage.xml
    diff-cover --compare-branch origin/main {toxinidir}/coverage.xml

[testenv:lint]
description = Perform linting.
deps = pre-commit>=2.7.1
skip_install = true
commands = pre-commit run --all-files --show-diff-on-failure {posargs:}

[testenv:clean-docs]
description = Clean the documentation artifacts.
deps = sphinx
skip_install = true
changedir = {toxinidir}/docs
allowlist_externals = make
commands = make clean

[testenv:check-docs]
description = Check the links in the docs.
deps = -r{toxinidir}/docs/requirements.txt
skip_install = true
allowlist_externals = sphinx-build
passenv = PYENCHANT_LIBRARY_PATH
commands =
    sphinx-build -b spelling {toxinidir}/docs/source {toxinidir}/docs/build/spellcheck
    sphinx-build -q -W --keep-going -b linkcheck {toxinidir}/docs/source {toxinidir}/docs/build/linkcheck

[testenv:docs]
description = Build the documentation.
skip_install = true
deps = -r{toxinidir}/docs/requirements.txt
allowlist_externals = sphinx-build
commands =
    sphinx-build --color -b html {toxinidir}/docs/source {toxinidir}/docs/build/html
    python -c 'import pathlib; print(f"Documentation is available under:", pathlib.Path(f"{toxinidir}") / "docs" / "build" / "html" / "index.html")'

[testenv:readme]
description = Check if README renders on PyPI.
deps = twine >= 1.12.1
skip_install = true
commands =
    pip wheel -q -w {envtmpdir}/build --no-deps .
    twine check {envtmpdir}/build/*
